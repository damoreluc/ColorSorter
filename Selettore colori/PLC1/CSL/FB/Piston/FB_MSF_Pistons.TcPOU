<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_MSF_Pistons" Id="{78e36ba8-cb60-4537-88b2-3ff9943f6860}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MSF_Pistons
VAR_INPUT
	bEnable	: BOOL;  // machine enable
	slot	: INT;   // destination slot
END_VAR

VAR_IN_OUT
	stIn		:	ST_CSL_In;
	stParams	: 	ST_CSL_Params;
	stOut		: 	ST_CSL_Out;	
END_VAR

VAR_OUTPUT
	eStep	: E_Step;	//current step of the state machine
	eErrStep : E_Step;  //step where an error was raised
	nErrid	: DINT;		//error identification code
	
	bFbEnd	: BOOL;
END_VAR

VAR
	bSensor: BOOL;
	pbValve : POINTER TO BOOL;
	nStepSlot : INT;
	Error: DINT;
	iMotor	: INT := 0;         // steps done while travelling on conveyor
    
	bInitialized	: BOOL;		//FB initialization
	eNewStep : E_Step;			//request for a new step
	bEntryact	: 	BOOL;		//step entry action performed
	
	Timer_Pistons : TON();	
	fbRtMotorImpulse : R_TRIG;  // edge detection on conveyor encoder
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* initialization *)
IF NOT bInitialized THEN    
	eNewstep 		:= 	E_Step.NoStep;    
	eStep 			:= 	E_Step.Conveyor;    
	bEntryact 		:= 	FALSE;    
	bInitialized 	:= 	TRUE; 
	bFbEnd			:=	FALSE;

	// association of the motors and the sensors to the steps
	CASE slot OF
		0:
			nStepSlot	:=	stParams.StepNoSlot;	
		1:
			pbValve		:= 	ADR(stOut.bValveSlot1);
			bSensor 	:= 	stIn.bSlot1;
			nStepSlot 	:= 	stParams.StepSlot1;
		2:
			pbValve		:= 	ADR(stOut.bValveSlot2);
			bSensor 	:= 	stIn.bSlot2;
			nStepSlot 	:= 	stParams.StepSlot2;
		3:
			pbValve		:= 	ADR(stOut.bValveSlot3);
			bSensor 	:= 	stIn.bSlot3;
			nStepSlot 	:= 	stParams.StepSlot3;
			
	END_CASE


ELSE   

	(* forcing the error state *)	
	(* disabled or faulty *)
	IF  NOT bEnable THEN
		eNewstep 	:=	E_Step.NeOrError;
	END_IF;

	(* state change management *)
	IF eNewstep <> E_Step.NoStep THEN    
		eStep 		:= 	eNewstep;    
		eNewstep 	:= 	E_Step.NoStep;   
 		bEntryact 	:= 	FALSE;
	END_IF;

	
	(* input signal conditioning *)
	(*filters*)
	//Timer_Pistons (IN:= (iMotor = nStepSlot), PT := T#500MS);
	Timer_Pistons (IN:= (iMotor = nStepSlot), PT := stParams.pistonReentryDelay);
	
	(*edges*)
	fbRtMotorImpulse(CLK:=	stIn.bMotorImpulse );

	// storing of the pieces
	CASE eStep OF

		// a new piece was placed on the conveyor belt
		E_Step.conveyor :
	
			(* body *)	
			stOut.bMotor		:=	 TRUE;
			stOut.bCompressor 	:=	 TRUE;
			pbValve^ 			:=	 FALSE;	
			
			(* Update steps Counter *)
			IF fbRtMotorImpulse.Q	THEN
				iMotor := iMotor + 1;
			END_IF
		
			(* transition *)	
			IF NOT bEnable THEN          
		 		eNewstep := E_Step.NeOrError;        
			ELSE 
				IF  iMotor = nStepSlot AND nStepSlot <> stParams.StepNoSlot THEN 
					eNewstep := E_Step.piston;
				ELSIF iMotor = nStepSlot AND nStepSlot = stParams.StepNoSlot THEN
					bFbEnd	:= TRUE;
					bInitialized := FALSE;
        		END_IF;
			END_IF
	
		// activation of the selected piston until the piece falls in its slot
		E_Step.piston :

			(* body *)
			stOut.bMotor		:= 	FALSE;
			stOut.bCompressor 	:= 	TRUE;
			pbValve^			:=	TRUE;
	
			(* transition *)
			IF NOT bEnable THEN          
		 		eNewstep := E_Step.NeOrError;        
			ELSE 
				IF  NOT bsensor THEN 
					eNewstep := E_Step.waiting;
       	 		END_IF;
			END_IF

		// wait the piston re-entry
		E_Step.waiting :
	
			(* body *)
			stOut.bMotor		:=	FALSE;
			stOut.bCompressor 	:= 	TRUE;
			pbValve^			:=	FALSE;	
			iMotor := 0;
		
			(* transition *)
			IF NOT bEnable THEN          
		 		eNewstep := E_Step.NeOrError;        
			ELSE 
				IF  Timer_Pistons.Q THEN 
					bFbEnd	:= TRUE;
					bInitialized := FALSE; 					           
       	 		END_IF;
			END_IF	
		E_Step.NeOrError :
			(*Body*)
			stOut.bMotor := FALSE;
		
			(*Transition - to Measuring*)
			
			
			(*Exit Act*)
			IF eNewStep <> E_Step.NoStep THEN
				IF eNewStep = E_Step.NeOrError THEN
					eErrStep := eStep;
					//nErrId	:= 16#9999_9999;
				END_IF
			END_IF		
			
		ELSE
	
		// Error case
		eNewstep 	:= 	E_Step.NeOrError;
		eErrStep 	:=	E_Step.Unknown;
		nErrId 		:= 	-9; 	
		
		
	END_CASE


END_IF]]></ST>
    </Implementation>
    <LineIds Name="FB_MSF_Pistons">
      <LineId Id="3" Count="114" />
      <LineId Id="166" Count="12" />
      <LineId Id="165" Count="0" />
      <LineId Id="118" Count="11" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>